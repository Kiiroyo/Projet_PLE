{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\achra\\\\OneDrive\\\\Bureau\\\\TrafficAnalyser-main\\\\front\\\\src\\\\components\\\\Map.tsx\",\n  _s = $RefreshSig$();\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet/dist/images/marker-shadow.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport CustomMarker from \"./CustomMarker\";\nimport data from \"../data/posts\";\nimport { useTheme } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = props => {\n  _s();\n  const theme = useTheme();\n  const [mapState, setMapState] = useState({\n    lat: 44.80416345,\n    lng: -0.599976,\n    zoom: 14\n  });\n  const [firstRender, setFirstRender] = useState(true);\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      setMapState({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        zoom: 5\n      });\n    });\n  }\n  const tileLayerRef = useRef(null);\n  const changeMapMode = () => {\n    const tileLayerElement = document.getElementsByClassName(\"leaflet-layer\");\n    if (theme.palette.mode === \"dark\") {\n      var _tileLayerElement$, _tileLayerElement$$cl, _tileLayerElement$2, _tileLayerElement$2$c;\n      (_tileLayerElement$ = tileLayerElement[0]) === null || _tileLayerElement$ === void 0 ? void 0 : (_tileLayerElement$$cl = _tileLayerElement$.classList) === null || _tileLayerElement$$cl === void 0 ? void 0 : _tileLayerElement$$cl.remove(\"map-tiles-light\");\n      (_tileLayerElement$2 = tileLayerElement[0]) === null || _tileLayerElement$2 === void 0 ? void 0 : (_tileLayerElement$2$c = _tileLayerElement$2.classList) === null || _tileLayerElement$2$c === void 0 ? void 0 : _tileLayerElement$2$c.add(\"map-tiles-dark\");\n      console.log(tileLayerElement[0].classList);\n    } else {\n      var _tileLayerElement$3, _tileLayerElement$3$c, _tileLayerElement$4, _tileLayerElement$4$c;\n      (_tileLayerElement$3 = tileLayerElement[0]) === null || _tileLayerElement$3 === void 0 ? void 0 : (_tileLayerElement$3$c = _tileLayerElement$3.classList) === null || _tileLayerElement$3$c === void 0 ? void 0 : _tileLayerElement$3$c.remove(\"map-tiles-dark\");\n      (_tileLayerElement$4 = tileLayerElement[0]) === null || _tileLayerElement$4 === void 0 ? void 0 : (_tileLayerElement$4$c = _tileLayerElement$4.classList) === null || _tileLayerElement$4$c === void 0 ? void 0 : _tileLayerElement$4$c.add(\"map-tiles-light\");\n      console.log(tileLayerElement[0].classList);\n    }\n  };\n  // Change the value of map-tiles class when theme changes\n  useEffect(() => {\n    if (firstRender) {\n      setTimeout(() => {\n        changeMapMode();\n      }, 1000);\n      setFirstRender(false);\n    } else {\n      changeMapMode();\n    }\n  }, [theme.palette.mode]);\n  const [markers, setMarkers] = useState(data);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"w-full h-full rounded-md\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      id: \"map\",\n      center: [mapState.lat, mapState.lng],\n      zoom: mapState.zoom,\n      scrollWheelZoom: true,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        borderRadius: \"5px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        className: theme.palette.mode === \"dark\" ? \"map-tiles-dark\" : \"map-tiles-light\",\n        ref: tileLayerRef,\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), markers.map(marker => /*#__PURE__*/_jsxDEV(CustomMarker, {\n        title: marker.title,\n        type: marker.type,\n        position: [marker.location.latitude, marker.location.longitude]\n      }, marker.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"AnqKltWO/lZjdLt/ZZa+xWye1Jo=\", false, function () {\n  return [useTheme];\n});\n_c = Map;\nexport default Map;\n\n/* \n<Fullscreen\n                    eventHandlers={{\n                        enterFullscreen: (event) =>\n                            console.log(\"entered fullscreen\", event),\n                        exitFullscreen: (event) =>\n                            console.log(\"exited fullscreen\", event),\n                    }}\n                    position=\"topleft\" // change the position of the button can be topleft, topright, bottomright or bottomleft, default topleft\n                    title=\"Show me the fullscreen !\" // change the title of the button, default Full Screen\n                    titleCancel=\"Exit fullscreen mode\" // change the title of the button when fullscreen is on, default Exit Full Screen\n                    forceSeparateButton={true} // force separate button to detach from zoom buttons, default false\n                    forcePseudoFullscreen={true} // force use of pseudo full screen even if full screen API is available, default false\n                    fullscreenElement={false} // Dom element to render in full screen, false by default, fallback to map._container\n                />\n*/\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["MapContainer","TileLayer","useEffect","useRef","useState","Box","CustomMarker","data","useTheme","Map","props","theme","mapState","setMapState","lat","lng","zoom","firstRender","setFirstRender","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","tileLayerRef","changeMapMode","tileLayerElement","document","getElementsByClassName","palette","mode","classList","remove","add","console","log","setTimeout","markers","setMarkers","height","width","borderRadius","map","marker","title","type","location"],"sources":["C:/Users/achra/OneDrive/Bureau/TrafficAnalyser-main/front/src/components/Map.tsx"],"sourcesContent":["import { MapContainer, TileLayer, TileLayerProps } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet/dist/images/marker-shadow.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport CustomMarker from \"./CustomMarker\";\nimport data from \"../data/posts\";\nimport Fullscreen from \"react-leaflet-fullscreen-plugin\";\nimport { useTheme } from \"@mui/material\";\n\ntype Props = {\n    children?: React.ReactNode;\n};\n\nconst Map = (props: Props) => {\n    const theme = useTheme();\n    const [mapState, setMapState] = useState({\n        lat: 44.80416345,\n        lng: -0.599976,\n        zoom: 14,\n    });\n    const [firstRender, setFirstRender] = useState(true);\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n            setMapState({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n                zoom: 5,\n            });\n        });\n    }\n\n    const tileLayerRef = useRef<any>(null);\n\n    const changeMapMode = () => {\n        const tileLayerElement =\n            document.getElementsByClassName(\"leaflet-layer\");\n        if (theme.palette.mode === \"dark\") {\n            tileLayerElement[0]?.classList?.remove(\"map-tiles-light\");\n            tileLayerElement[0]?.classList?.add(\"map-tiles-dark\");\n            console.log(tileLayerElement[0].classList);\n        } else {\n            tileLayerElement[0]?.classList?.remove(\"map-tiles-dark\");\n            tileLayerElement[0]?.classList?.add(\"map-tiles-light\");\n            console.log(tileLayerElement[0].classList);\n        }\n    };\n    // Change the value of map-tiles class when theme changes\n    useEffect(() => {\n        if (firstRender) {\n            setTimeout(() => {\n                changeMapMode();\n            }, 1000);\n            setFirstRender(false);\n        } else {\n            changeMapMode();\n        }\n    }, [theme.palette.mode]);\n\n    const [markers, setMarkers] = useState(data);\n\n    return (\n        <Box className=\"w-full h-full rounded-md\">\n            <MapContainer\n                id=\"map\"\n                center={[mapState.lat, mapState.lng]}\n                zoom={mapState.zoom}\n                scrollWheelZoom={true}\n                style={{ height: \"100%\", width: \"100%\", borderRadius: \"5px\" }}\n            >\n                <TileLayer\n                    className={\n                        theme.palette.mode === \"dark\"\n                            ? \"map-tiles-dark\"\n                            : \"map-tiles-light\"\n                    }\n                    ref={tileLayerRef}\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {markers.map((marker) => (\n                    <CustomMarker\n                        key={marker.title}\n                        title={marker.title}\n                        type={marker.type}\n                        position={[\n                            marker.location.latitude,\n                            marker.location.longitude,\n                        ]}\n                    />\n                ))}\n            </MapContainer>\n        </Box>\n    );\n};\n\nexport default Map;\n\n/* \n<Fullscreen\n                    eventHandlers={{\n                        enterFullscreen: (event) =>\n                            console.log(\"entered fullscreen\", event),\n                        exitFullscreen: (event) =>\n                            console.log(\"exited fullscreen\", event),\n                    }}\n                    position=\"topleft\" // change the position of the button can be topleft, topright, bottomright or bottomleft, default topleft\n                    title=\"Show me the fullscreen !\" // change the title of the button, default Full Screen\n                    titleCancel=\"Exit fullscreen mode\" // change the title of the button when fullscreen is on, default Exit Full Screen\n                    forceSeparateButton={true} // force separate button to detach from zoom buttons, default false\n                    forcePseudoFullscreen={true} // force use of pseudo full screen even if full screen API is available, default false\n                    fullscreenElement={false} // Dom element to render in full screen, false by default, fallback to map._container\n                />\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}